
LED Matrix Scroll text.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  00000522  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c45  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007aa  00000000  00000000  00001249  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000561  00000000  00000000  000019f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000479  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000614  00000000  00000000  00002501  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002b15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 01 	jmp	0x256	; 0x256 <__ctors_end>
   4:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
   8:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
   c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  10:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  14:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  18:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  1c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  20:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  24:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  28:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  2c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  30:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  34:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  38:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  3c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  40:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  44:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  48:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  4c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  50:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  54:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  58:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  5c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  60:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
  64:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	4b 68       	ori	r20, 0x8B	; 139
  6a:	61 6c       	ori	r22, 0xC1	; 193
  6c:	69 64       	ori	r22, 0x49	; 73
  6e:	20 54       	subi	r18, 0x40	; 64
  70:	61 72       	andi	r22, 0x21	; 33
  72:	65 6b       	ori	r22, 0xB5	; 181
	...

00000075 <characters>:
  75:	00 00 00 00 00 00 00 4f 00 00 00 07 00 07 00 14     .......O........
  85:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  95:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  a5:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  b5:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  c5:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  d5:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  e5:	49 49 30 03 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  f5:	29 1e 00 6c 6c 00 00 00 56 36 00 00 08 14 22 41     )..ll...V6...."A
 105:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 115:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 3e 3e     2IyA>~...~.III>>
 125:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 49 7f 09     AAA".AAA>.IIII..
 135:	09 09 01 3e 41 49 49 3a 7f 08 08 08 7f 41 41 7f     ...>AII:.....AA.
 145:	41 41 30 41 41 3f 01 7f 08 14 22 41 7f 40 40 40     AA0AA?...."A.@@@
 155:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 165:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 09 19 66 46     .....>AQ!^....fF
 175:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 0f 30     III1.....?@@@?.0
 185:	40 30 0f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @0.?@8@?c...c..x
 195:	04 03 61 51 49 45 43 7f 41 41 00 00 02 04 08 10     ..aQIEC.AA......
 1a5:	20 00 00 41 41 7f 04 02 01 02 04 40 40 40 40 40      ..AA......@@@@@
 1b5:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1c5:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1d5:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1e5:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1f5:	00 78 04 08 04 78 7c 08 04 04 78 38 44 44 44 38     .x...x|...x8DDD8
 205:	7c 14 14 14 08 08 14 14 7c 00 7c 08 04 04 08 48     |.......|.|....H
 215:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 225:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 235:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 245:	00 00 41 36 08 00 08 04 04 08 04 00 00 00 00 00     ..A6............
	...

00000256 <__ctors_end>:
 256:	11 24       	eor	r1, r1
 258:	1f be       	out	0x3f, r1	; 63
 25a:	cf ef       	ldi	r28, 0xFF	; 255
 25c:	d8 e0       	ldi	r29, 0x08	; 8
 25e:	de bf       	out	0x3e, r29	; 62
 260:	cd bf       	out	0x3d, r28	; 61

00000262 <__do_clear_bss>:
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	a0 e0       	ldi	r26, 0x00	; 0
 266:	b1 e0       	ldi	r27, 0x01	; 1
 268:	01 c0       	rjmp	.+2      	; 0x26c <.do_clear_bss_start>

0000026a <.do_clear_bss_loop>:
 26a:	1d 92       	st	X+, r1

0000026c <.do_clear_bss_start>:
 26c:	a0 32       	cpi	r26, 0x20	; 32
 26e:	b2 07       	cpc	r27, r18
 270:	e1 f7       	brne	.-8      	; 0x26a <.do_clear_bss_loop>
 272:	0e 94 46 02 	call	0x48c	; 0x48c <main>
 276:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <_exit>

0000027a <__bad_interrupt>:
 27a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000027e <initSPI>:


// Initializes SPI
void initSPI(void) 
{
  DDRB |= (1 << PB2);	    // Set SS output 
 27e:	22 9a       	sbi	0x04, 2	; 4
  PORTB |= (1 << PB2);      // Begin high (unselected)
 280:	2a 9a       	sbi	0x05, 2	; 5

  DDRB |= (1 << PB3);       // Output on MOSI 
 282:	23 9a       	sbi	0x04, 3	; 4
  DDRB |= (1 << PB5);       // Output on SCK 
 284:	25 9a       	sbi	0x04, 5	; 4

  SPCR |= (1 << MSTR);      // Clockmaster 
 286:	8c b5       	in	r24, 0x2c	; 44
 288:	80 61       	ori	r24, 0x10	; 16
 28a:	8c bd       	out	0x2c, r24	; 44
  SPCR |= (1 << SPE);       // Enable SPI
 28c:	8c b5       	in	r24, 0x2c	; 44
 28e:	80 64       	ori	r24, 0x40	; 64
 290:	8c bd       	out	0x2c, r24	; 44
 292:	08 95       	ret

00000294 <writeByte>:


// Send byte through SPI
void writeByte(uint8_t byte)
{
  SPDR = byte;                      // SPI starts sending immediately  
 294:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1 << SPIF)));     // Loop until complete bit set
 296:	0d b4       	in	r0, 0x2d	; 45
 298:	07 fe       	sbrs	r0, 7
 29a:	fd cf       	rjmp	.-6      	; 0x296 <writeByte+0x2>
}
 29c:	08 95       	ret

0000029e <writeWord>:


// Sends word through SPI
void writeWord(uint8_t address, uint8_t data) 
{
 29e:	cf 93       	push	r28
 2a0:	c6 2f       	mov	r28, r22
  writeByte(address);	// Write first byte
 2a2:	0e 94 4a 01 	call	0x294	; 0x294 <writeByte>
  writeByte(data);      // Write Second byte
 2a6:	8c 2f       	mov	r24, r28
 2a8:	0e 94 4a 01 	call	0x294	; 0x294 <writeByte>
}
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <initMatrix>:


// Initializes all cascaded devices
void initMatrix() 
{
 2b0:	cf 93       	push	r28
	uint8_t i;	// Var used in for loops

	// Set display brighness
	SLAVE_SELECT;
 2b2:	2a 98       	cbi	0x05, 2	; 5
 2b4:	c4 e0       	ldi	r28, 0x04	; 4
	for(i = 0; i < NUM_DEVICES; i++)   // Loop through number of cascaded devices
	{
		writeByte(0x0A); // Select Intensity register
 2b6:	8a e0       	ldi	r24, 0x0A	; 10
 2b8:	0e 94 4a 01 	call	0x294	; 0x294 <writeByte>
		writeByte(0x07); // Set brightness
 2bc:	87 e0       	ldi	r24, 0x07	; 7
 2be:	0e 94 4a 01 	call	0x294	; 0x294 <writeByte>
 2c2:	c1 50       	subi	r28, 0x01	; 1
{
	uint8_t i;	// Var used in for loops

	// Set display brighness
	SLAVE_SELECT;
	for(i = 0; i < NUM_DEVICES; i++)   // Loop through number of cascaded devices
 2c4:	c1 f7       	brne	.-16     	; 0x2b6 <initMatrix+0x6>
	{
		writeByte(0x0A); // Select Intensity register
		writeByte(0x07); // Set brightness
	}
	SLAVE_DESELECT;
 2c6:	2a 9a       	sbi	0x05, 2	; 5

	
	// Set display refresh
	SLAVE_SELECT;
 2c8:	2a 98       	cbi	0x05, 2	; 5
 2ca:	c4 e0       	ldi	r28, 0x04	; 4
	for(i = 0; i < NUM_DEVICES; i++)
	{
		writeByte(0x0B); // Select Scan-Limit register
 2cc:	8b e0       	ldi	r24, 0x0B	; 11
 2ce:	0e 94 4a 01 	call	0x294	; 0x294 <writeByte>
		writeByte(0x07); // Select columns 0-7
 2d2:	87 e0       	ldi	r24, 0x07	; 7
 2d4:	0e 94 4a 01 	call	0x294	; 0x294 <writeByte>
 2d8:	c1 50       	subi	r28, 0x01	; 1
	SLAVE_DESELECT;

	
	// Set display refresh
	SLAVE_SELECT;
	for(i = 0; i < NUM_DEVICES; i++)
 2da:	c1 f7       	brne	.-16     	; 0x2cc <initMatrix+0x1c>
	{
		writeByte(0x0B); // Select Scan-Limit register
		writeByte(0x07); // Select columns 0-7
	}
	SLAVE_DESELECT;
 2dc:	2a 9a       	sbi	0x05, 2	; 5

	 
	// Turn on the display
	SLAVE_SELECT;
 2de:	2a 98       	cbi	0x05, 2	; 5
 2e0:	c4 e0       	ldi	r28, 0x04	; 4
	for(i = 0; i < NUM_DEVICES; i++)
	{
		writeByte(0x0C); // Select Shutdown register
 2e2:	8c e0       	ldi	r24, 0x0C	; 12
 2e4:	0e 94 4a 01 	call	0x294	; 0x294 <writeByte>
		writeByte(0x01); // Select Normal Operation mode
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 4a 01 	call	0x294	; 0x294 <writeByte>
 2ee:	c1 50       	subi	r28, 0x01	; 1
	SLAVE_DESELECT;

	 
	// Turn on the display
	SLAVE_SELECT;
	for(i = 0; i < NUM_DEVICES; i++)
 2f0:	c1 f7       	brne	.-16     	; 0x2e2 <initMatrix+0x32>
	{
		writeByte(0x0C); // Select Shutdown register
		writeByte(0x01); // Select Normal Operation mode
	}
	SLAVE_DESELECT;
 2f2:	2a 9a       	sbi	0x05, 2	; 5

	 
	// Disable Display-Test
	SLAVE_SELECT;
 2f4:	2a 98       	cbi	0x05, 2	; 5
 2f6:	c4 e0       	ldi	r28, 0x04	; 4
	for(i = 0; i < NUM_DEVICES; i++)
	{
		writeByte(0x0F); // Select Display-Test register
 2f8:	8f e0       	ldi	r24, 0x0F	; 15
 2fa:	0e 94 4a 01 	call	0x294	; 0x294 <writeByte>
		writeByte(0x00); // Disable Display-Test
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 4a 01 	call	0x294	; 0x294 <writeByte>
 304:	c1 50       	subi	r28, 0x01	; 1
	SLAVE_DESELECT;

	 
	// Disable Display-Test
	SLAVE_SELECT;
	for(i = 0; i < NUM_DEVICES; i++)
 306:	c1 f7       	brne	.-16     	; 0x2f8 <initMatrix+0x48>
	{
		writeByte(0x0F); // Select Display-Test register
		writeByte(0x00); // Disable Display-Test
	}
	SLAVE_DESELECT;
 308:	2a 9a       	sbi	0x05, 2	; 5
}
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <clearMatrix>:


// Clears all columns on all devices
void clearMatrix(void)
{
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
	for(uint8_t x = 1; x < 9; x++) // for all columns
 312:	d1 e0       	ldi	r29, 0x01	; 1
	{   
        SLAVE_SELECT;
 314:	2a 98       	cbi	0x05, 2	; 5
 316:	c4 e0       	ldi	r28, 0x04	; 4
        for(uint8_t i = 0; i < NUM_DEVICES; i++)
		{
			writeByte(x);    // Select column x
 318:	8d 2f       	mov	r24, r29
 31a:	0e 94 4a 01 	call	0x294	; 0x294 <writeByte>
			writeByte(0x00); // Set column to 0
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 4a 01 	call	0x294	; 0x294 <writeByte>
 324:	c1 50       	subi	r28, 0x01	; 1
void clearMatrix(void)
{
	for(uint8_t x = 1; x < 9; x++) // for all columns
	{   
        SLAVE_SELECT;
        for(uint8_t i = 0; i < NUM_DEVICES; i++)
 326:	c1 f7       	brne	.-16     	; 0x318 <clearMatrix+0xa>
		{
			writeByte(x);    // Select column x
			writeByte(0x00); // Set column to 0
		}
		SLAVE_DESELECT;
 328:	2a 9a       	sbi	0x05, 2	; 5


// Clears all columns on all devices
void clearMatrix(void)
{
	for(uint8_t x = 1; x < 9; x++) // for all columns
 32a:	df 5f       	subi	r29, 0xFF	; 255
 32c:	d9 30       	cpi	r29, 0x09	; 9
 32e:	91 f7       	brne	.-28     	; 0x314 <clearMatrix+0x6>
			writeByte(x);    // Select column x
			writeByte(0x00); // Set column to 0
		}
		SLAVE_DESELECT;
	}
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <initBuffer>:


// Initializes buffer empty
void initBuffer(void)
{   
 336:	e0 e0       	ldi	r30, 0x00	; 0
 338:	f1 e0       	ldi	r31, 0x01	; 1
 33a:	80 e2       	ldi	r24, 0x20	; 32
 33c:	91 e0       	ldi	r25, 0x01	; 1
	for(uint8_t i = 0; i < NUM_DEVICES*8; i++)
		buffer[i] = 0x00;
 33e:	11 92       	st	Z+, r1


// Initializes buffer empty
void initBuffer(void)
{   
	for(uint8_t i = 0; i < NUM_DEVICES*8; i++)
 340:	e8 17       	cp	r30, r24
 342:	f9 07       	cpc	r31, r25
 344:	e1 f7       	brne	.-8      	; 0x33e <initBuffer+0x8>
		buffer[i] = 0x00;
}       
 346:	08 95       	ret

00000348 <pushBuffer>:


// Moves each byte forward in the buffer and adds next byte in at the end
void pushBuffer(uint8_t x)
{
 348:	e0 e0       	ldi	r30, 0x00	; 0
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	2f e1       	ldi	r18, 0x1F	; 31
 34e:	31 e0       	ldi	r19, 0x01	; 1
	for(uint8_t i = 0; i < NUM_DEVICES*8 - 1; i++)
		buffer[i] = buffer[i+1];
 350:	91 81       	ldd	r25, Z+1	; 0x01
 352:	91 93       	st	Z+, r25


// Moves each byte forward in the buffer and adds next byte in at the end
void pushBuffer(uint8_t x)
{
	for(uint8_t i = 0; i < NUM_DEVICES*8 - 1; i++)
 354:	e2 17       	cp	r30, r18
 356:	f3 07       	cpc	r31, r19
 358:	d9 f7       	brne	.-10     	; 0x350 <pushBuffer+0x8>
		buffer[i] = buffer[i+1];
	
	buffer[NUM_DEVICES*8 - 1] = x;
 35a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_edata+0x1f>
 35e:	08 95       	ret

00000360 <displayBuffer>:
}


// Displays current buffer on the cascaded devices
void displayBuffer()
{   
 360:	af 92       	push	r10
 362:	bf 92       	push	r11
 364:	cf 92       	push	r12
 366:	df 92       	push	r13
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	0f 2e       	mov	r0, r31
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	af 2e       	mov	r10, r31
 378:	f1 e0       	ldi	r31, 0x01	; 1
 37a:	bf 2e       	mov	r11, r31
 37c:	f0 2d       	mov	r31, r0
   for(uint8_t i = 0; i < NUM_DEVICES; i++) // For each cascaded device
 37e:	d0 e0       	ldi	r29, 0x00	; 0
 380:	2a c0       	rjmp	.+84     	; 0x3d6 <displayBuffer+0x76>
   {
	   for(uint8_t j = 1; j < 9; j++) // For each column
	   {
		   SLAVE_SELECT;
 382:	2a 98       	cbi	0x05, 2	; 5
		   
		   for(uint8_t k = 0; k < i; k++) // Write Pre No-Op code
 384:	dd 23       	and	r29, r29
 386:	59 f1       	breq	.+86     	; 0x3de <displayBuffer+0x7e>
 388:	c0 e0       	ldi	r28, 0x00	; 0
			   writeWord(0x00, 0x00);
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 4f 01 	call	0x29e	; 0x29e <writeWord>
   {
	   for(uint8_t j = 1; j < 9; j++) // For each column
	   {
		   SLAVE_SELECT;
		   
		   for(uint8_t k = 0; k < i; k++) // Write Pre No-Op code
 392:	cf 5f       	subi	r28, 0xFF	; 255
 394:	cd 13       	cpse	r28, r29
 396:	f9 cf       	rjmp	.-14     	; 0x38a <displayBuffer+0x2a>
			   writeWord(0x00, 0x00);
		   
		   writeWord(j, buffer[j + i*8 - 1]); // Write column data from buffer
 398:	f7 01       	movw	r30, r14
 39a:	60 81       	ld	r22, Z
 39c:	81 2f       	mov	r24, r17
 39e:	0e 94 4f 01 	call	0x29e	; 0x29e <writeWord>
		   
		   for(uint8_t k = NUM_DEVICES-1; k > i; k--) // Write Post No-Op code
 3a2:	d3 30       	cpi	r29, 0x03	; 3
 3a4:	40 f4       	brcc	.+16     	; 0x3b6 <displayBuffer+0x56>
   {
	   for(uint8_t j = 1; j < 9; j++) // For each column
	   {
		   SLAVE_SELECT;
		   
		   for(uint8_t k = 0; k < i; k++) // Write Pre No-Op code
 3a6:	c3 e0       	ldi	r28, 0x03	; 3
			   writeWord(0x00, 0x00);
		   
		   writeWord(j, buffer[j + i*8 - 1]); // Write column data from buffer
		   
		   for(uint8_t k = NUM_DEVICES-1; k > i; k--) // Write Post No-Op code
			   writeWord(0x00, 0x00);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 4f 01 	call	0x29e	; 0x29e <writeWord>
		   for(uint8_t k = 0; k < i; k++) // Write Pre No-Op code
			   writeWord(0x00, 0x00);
		   
		   writeWord(j, buffer[j + i*8 - 1]); // Write column data from buffer
		   
		   for(uint8_t k = NUM_DEVICES-1; k > i; k--) // Write Post No-Op code
 3b0:	c1 50       	subi	r28, 0x01	; 1
 3b2:	dc 17       	cp	r29, r28
 3b4:	c8 f3       	brcs	.-14     	; 0x3a8 <displayBuffer+0x48>
			   writeWord(0x00, 0x00);
		   
		   SLAVE_DESELECT;
 3b6:	2a 9a       	sbi	0x05, 2	; 5
// Displays current buffer on the cascaded devices
void displayBuffer()
{   
   for(uint8_t i = 0; i < NUM_DEVICES; i++) // For each cascaded device
   {
	   for(uint8_t j = 1; j < 9; j++) // For each column
 3b8:	1f 5f       	subi	r17, 0xFF	; 255
 3ba:	ff ef       	ldi	r31, 0xFF	; 255
 3bc:	ef 1a       	sub	r14, r31
 3be:	ff 0a       	sbc	r15, r31
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	c8 1a       	sub	r12, r24
 3c4:	d8 0a       	sbc	r13, r24
 3c6:	19 30       	cpi	r17, 0x09	; 9
 3c8:	e1 f6       	brne	.-72     	; 0x382 <displayBuffer+0x22>


// Displays current buffer on the cascaded devices
void displayBuffer()
{   
   for(uint8_t i = 0; i < NUM_DEVICES; i++) // For each cascaded device
 3ca:	df 5f       	subi	r29, 0xFF	; 255
 3cc:	e8 e0       	ldi	r30, 0x08	; 8
 3ce:	ae 0e       	add	r10, r30
 3d0:	b1 1c       	adc	r11, r1
 3d2:	d4 30       	cpi	r29, 0x04	; 4
 3d4:	51 f0       	breq	.+20     	; 0x3ea <displayBuffer+0x8a>
}


// Displays current buffer on the cascaded devices
void displayBuffer()
{   
 3d6:	65 01       	movw	r12, r10
 3d8:	75 01       	movw	r14, r10
 3da:	11 e0       	ldi	r17, 0x01	; 1
 3dc:	d2 cf       	rjmp	.-92     	; 0x382 <displayBuffer+0x22>
		   SLAVE_SELECT;
		   
		   for(uint8_t k = 0; k < i; k++) // Write Pre No-Op code
			   writeWord(0x00, 0x00);
		   
		   writeWord(j, buffer[j + i*8 - 1]); // Write column data from buffer
 3de:	f6 01       	movw	r30, r12
 3e0:	60 81       	ld	r22, Z
 3e2:	81 2f       	mov	r24, r17
 3e4:	0e 94 4f 01 	call	0x29e	; 0x29e <writeWord>
 3e8:	de cf       	rjmp	.-68     	; 0x3a6 <displayBuffer+0x46>
			   writeWord(0x00, 0x00);
		   
		   SLAVE_DESELECT;
	   }
   }
}
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	1f 91       	pop	r17
 3f0:	ff 90       	pop	r15
 3f2:	ef 90       	pop	r14
 3f4:	df 90       	pop	r13
 3f6:	cf 90       	pop	r12
 3f8:	bf 90       	pop	r11
 3fa:	af 90       	pop	r10
 3fc:	08 95       	ret

000003fe <pushCharacter>:
	buffer[NUM_DEVICES*8 - 1] = x;
}

// Pushes in 5 characters columns into the buffer.
void pushCharacter(uint8_t c)
{
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	ec 01       	movw	r28, r24
 408:	cc 0f       	add	r28, r28
 40a:	dd 1f       	adc	r29, r29
 40c:	cc 0f       	add	r28, r28
 40e:	dd 1f       	adc	r29, r29
 410:	8c 0f       	add	r24, r28
 412:	9d 1f       	adc	r25, r29
 414:	ec 01       	movw	r28, r24
 416:	cb 58       	subi	r28, 0x8B	; 139
 418:	df 4f       	sbci	r29, 0xFF	; 255
 41a:	15 e0       	ldi	r17, 0x05	; 5
		for(uint8_t i = 0; i < 5; i++)				// For 5 bytes representing each character
		{
			pushBuffer(pgm_read_byte(&characters[c][i]));   // Push the byte from the characters array to the display buffer
 41c:	fe 01       	movw	r30, r28
 41e:	84 91       	lpm	r24, Z
 420:	0e 94 a4 01 	call	0x348	; 0x348 <pushBuffer>
			displayBuffer();				// Display the current buffer on the devices
 424:	0e 94 b0 01 	call	0x360	; 0x360 <displayBuffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	87 eb       	ldi	r24, 0xB7	; 183
 42a:	98 e8       	ldi	r25, 0x88	; 136
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	11 50       	subi	r17, 0x01	; 1
 436:	21 96       	adiw	r28, 0x01	; 1
}

// Pushes in 5 characters columns into the buffer.
void pushCharacter(uint8_t c)
{
		for(uint8_t i = 0; i < 5; i++)				// For 5 bytes representing each character
 438:	11 11       	cpse	r17, r1
 43a:	f0 cf       	rjmp	.-32     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		{
			pushBuffer(pgm_read_byte(&characters[c][i]));   // Push the byte from the characters array to the display buffer
			displayBuffer();				// Display the current buffer on the devices
			_delay_us(DEL);					// and delay
		}
}
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	08 95       	ret

00000444 <displayMessage>:

// Takes a pointer to the beginning of a char array holding message, and array size, scrolls message.
void displayMessage(const char *arrayPointer, uint16_t arraySize)
{
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
	for(uint16_t i = 0; i < arraySize; i++)
 44c:	61 15       	cp	r22, r1
 44e:	71 05       	cpc	r23, r1
 450:	c1 f0       	breq	.+48     	; 0x482 <displayMessage+0x3e>
 452:	8c 01       	movw	r16, r24
 454:	ec 01       	movw	r28, r24
 456:	06 0f       	add	r16, r22
 458:	17 1f       	adc	r17, r23
	{
		pushCharacter(pgm_read_byte_near(arrayPointer + i) - 32);	// Send converted ASCII value of character in message to index in characters array (-32 sends corrent index to characters array)
 45a:	fe 01       	movw	r30, r28
 45c:	84 91       	lpm	r24, Z
 45e:	80 52       	subi	r24, 0x20	; 32
 460:	0e 94 ff 01 	call	0x3fe	; 0x3fe <pushCharacter>
		pushBuffer(0x00);						// Add empty column after character for letter spacing
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 a4 01 	call	0x348	; 0x348 <pushBuffer>
		displayBuffer();						// Display &
 46a:	0e 94 b0 01 	call	0x360	; 0x360 <displayBuffer>
 46e:	87 eb       	ldi	r24, 0xB7	; 183
 470:	98 e8       	ldi	r25, 0x88	; 136
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <displayMessage+0x2e>
 476:	00 c0       	rjmp	.+0      	; 0x478 <displayMessage+0x34>
 478:	00 00       	nop
 47a:	21 96       	adiw	r28, 0x01	; 1
}

// Takes a pointer to the beginning of a char array holding message, and array size, scrolls message.
void displayMessage(const char *arrayPointer, uint16_t arraySize)
{
	for(uint16_t i = 0; i < arraySize; i++)
 47c:	c0 17       	cp	r28, r16
 47e:	d1 07       	cpc	r29, r17
 480:	61 f7       	brne	.-40     	; 0x45a <displayMessage+0x16>
		pushBuffer(0x00);						// Add empty column after character for letter spacing
		displayBuffer();						// Display &
		_delay_us(DEL); 						// Delay
	}
	
}
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	08 95       	ret

0000048c <main>:

// Main Loop
int main(void)
{
	// Inits
	initSPI();
 48c:	0e 94 3f 01 	call	0x27e	; 0x27e <initSPI>
	initMatrix();
 490:	0e 94 58 01 	call	0x2b0	; 0x2b0 <initMatrix>
	clearMatrix();
 494:	0e 94 87 01 	call	0x30e	; 0x30e <clearMatrix>
	initBuffer();
 498:	0e 94 9b 01 	call	0x336	; 0x336 <initBuffer>
	
	// Event loop
	while (1)
	{
		
		displayMessage(messagePointer, messageSize);	// Display the message
 49c:	6d e0       	ldi	r22, 0x0D	; 13
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	88 e6       	ldi	r24, 0x68	; 104
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 22 02 	call	0x444	; 0x444 <displayMessage>
 4a8:	f9 cf       	rjmp	.-14     	; 0x49c <main+0x10>

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
